{
  "1": {
    "text": "Suppose you are asked to implement the n-th Fibanacci number using recursion only (i.e., no loop\nimplementation)? How to avoid stack overflow for large n?",
    "tables": [],
    "figures": [],
    "score": "10"
  },
  "2": {
    "text": "What is the Big O complexity of following recurrence? Justify your answer.",
    "tables": [],
    "figures": [],
    "score": "20"
  },
  "2a": {
    "text": "T(n) = 2T(n/4) + T(2n/3) + cn, where c is a constant.",
    "tables": [],
    "figures": [],
    "score": "10"
  },
  "2b": {
    "text": "T(n) = 2T(âˆšn) + lgn (hint: you may replace n with other form)",
    "tables": [],
    "figures": [],
    "score": "10"
  },
  "3": {
    "text": "Prove that an n-element heap has at most [n/2^{h+1}] nodes at height h.",
    "tables": [],
    "figures": [],
    "score": "10"
  },
  "4": {
    "text": "Mr. Stupid claims we can sort n real numbers in linear time by multiplying a large integer to each\nreal number such that all of them become integers. Then, the counting sort can be used to sort these integers\nin linear time. What is the problem of this method?",
    "tables": [],
    "figures": [],
    "score": "5"
  },
  "5": {
    "text": "Longest common subsequence.",
    "tables": [],
    "figures": [],
    "score": "35"
  },
  "5a": {
    "text": "Write the optimal substructure (recurrence) of computing LCS of k sequences, where k = 3\n(5%). What is the time complexity of computing LCS for k sequences of length n (5%).",
    "tables": [],
    "figures": [],
    "score": "10"
  },
  "5b": {
    "text": "Mr. Smart claimed that the LCS of three sequences can be obtained by first computing LCSs of\nany two sequences (say LCS_{12}), and then compute LCS of LCS_{12} and the remaining sequence. What's\nthe bug of this method? Give an example.",
    "tables": [],
    "figures": [],
    "score": "5"
  },
  "5c": {
    "text": "Given a string, find the longest subsequence occurring at least twice in the string, requiring\ntheir indices must not overlap. e.g., Given ATACTCGAG, the answer is 4 since ATCG occurs twice\nand their indices (i.e., (1,2,4,7) and (3,5,6,9)) do not overlap. Describe a dynamic programming\n(recurrence) for this problem. Illustrate a bottom-up DP using the string ATACTCGAG.",
    "tables": [],
    "figures": [],
    "score": "10"
  },
  "5d": {
    "text": "Compute the Longest Palindrome Subsequence (LPS) in any sequence using dynamic\nprogramming. Given a string \"character,\" the LPS is \"carac.\" You should write down the recurrence\nand bottom-up computation.",
    "tables": [],
    "figures": [],
    "score": "10"
  },
  "6": {
    "text": "Consider the knapsack problem of n items and W pack size. Suppose the pack/item sizes are very\nlarge and the item values are very small. Give a dynamic programming for solving this problem. Illustrate\nyour algorithm using the following example (W=500).\n[TABLE]",
    "tables": [
      "| Item | Weight | Value |\n|------|--------|-------|\n| 1    | 100    | 1     |\n| 2    | 200    | 2     |\n| 3    | 250    | 4     |\n| 4    | 300    | 5     |"
    ],
    "figures": [],
    "score": "10"
  },
  "7": {
    "text": "Consider the following six activities with (start time, finish time, and value): (2, 4, 3), (5, 5, 5), (3,\n4, 2), (1, 4, 3), (1, 3, 1), (3, 5, 4). Illustrate a dynamic programming algorithm for computing the mutually-\nexclusive subset of activities of maximum total values using the above example.",
    "tables": [],
    "figures": [],
    "score": "10"
  }
}