{
  "1": {
    "text": "Suppose you are asked to implement the n-th Fibanacci number using recursion only (i.e., no loop implementation). How to avoid stack overflow for large n? Briefly explain your solution.",
    "tables": [],
    "figures": [],
    "score": "10",
    "rubric": "- 正確辨識最佳策略 (6 分) \n . 明確指出需採用尾遞迴或其他遞迴優化方法，如遞迴轉換 (6 分) \n . 提及遞迴優化概念，但未清楚指出尾遞迴或具體優化策略 (部分分) \n . 未提及或選錯策略，僅描述一般遞迴做法 (0 分) \n 詳盡解釋避免堆疊溢出機制 (4 分) \n . 清楚描述使用累加器參數、狀態傳遞等技巧，使遞迴呼叫深度維持常數 (4 分) \n . 提及部分技術（如累加器、尾呼叫），但說明不夠完整 (部分分) \n . 未解釋如何防止堆疊溢出，或提出錯誤機制 (0 分)"
  },
  "2": {
    "text": "What is the Big O complexity of following recurrence? Justify your answer.",
    "tables": [],
    "figures": [],
    "score": "20",
    "rubric": "- 正確識別Big-O複雜度 (8分)  \n  - 完全得分 (8分)：正確指出遞迴的Big-O複雜度，並能依據適當的方法（如Master定理、遞迴樹等）得出正確答案。  \n  - 部分得分 (4～7分)：部分運用正確分析方法，但結果有誤或缺少關鍵細節。  \n  - 未得分 (0分)：完全未識別正確複雜度或答案錯誤。\n\n- 合理且正確的證明與分析 (8分)  \n  - 完全得分 (8分)：完整闡述遞迴推導過程，步驟清晰、論證嚴謹，能說明所有關鍵轉換與假設。  \n  - 部分得分 (4～7分)：證明中部分概念正確，但論證不夠完整或部分步驟存在漏洞。  \n  - 未得分 (0分)：缺乏有效證明，或論證邏輯混亂，完全無法支持答案。\n\n- 答案的結構與表達清晰 (4分)  \n  - 完全得分 (4分)：答案組織有序、語句通順，讓評分者能清楚理解分析與證明過程。  \n  - 部分得分 (1～3分)：部分段落或敘述略嫌混亂，但大致能理解思路。  \n  - 未得分 (0分)：結構混亂、表述不清，無法有效傳達解題思路。"
  },
  "2a": {
    "text": "T(n) = 2T(n/3) + T(n/2) + cn, where c is a constant.",
    "tables": [],
    "figures": [],
    "score": "10",
    "rubric": "- 遞迴關係理解與解釋 (2 分)\n. 清楚寫出遞迴關係式並說明每一項意義 (2 分)\n. 僅部分理解遞迴式含義或說明不完整 (部分分)\n. 未正確解釋遞迴式或完全錯誤 (0 分)\n\n遞迴樹展開 (3 分)\n. 正確展開遞迴樹至少兩層並解釋分支結構 (3 分)\n. 有展開但推導不完整或有錯誤 (部分分)\n. 無展開或完全錯誤 (0 分)\n\n遞迴深度與每層計算分析 (2 分)\n. 正確計算出遞迴深度為 O(log n) 並說明終止條件 (2 分)\n. 有部分概念但說明不夠清楚或有誤 (部分分)\n. 無提及深度或錯誤判斷 (0 分)\n\n整體時間複雜度推導 (2 分)\n. 清楚推導總時間為 O(n log n)，並說明每層為 O(n) (2 分)\n. 方向正確但推導略有錯誤 (部分分)\n. 無正確推導或誤判時間複雜度 (0 分)\n\n表達與邏輯 (1 分)\n. 公式表達正確、過程條理清晰、易於理解 (1 分)\n. 公式或敘述略顯混亂，但不影響主體邏輯 (部分分)\n. 整體表達混亂或難以理解 (0 分)"
  },
  "2b": {
    "text": "T(n) = 2T(√n) + lgn (hint: you may replace n with other form)",
    "tables": [],
    "figures": [],
    "score": "10",
    "rubric": "- 換元與遞迴關係轉換 (4 分) \n . 正確選擇適當的換元（例如 m = log n 或 n = 2^m），並完整推導出等價的遞迴關係 S(m) = 2S(m/2) + m (4 分) \n . 進行換元但推導或轉換步驟有部分錯誤或不完整 (部分分) \n . 未嘗試或換元、推導過程嚴重錯誤 (0 分) \n Master 定理（或等價方法）的正確應用 (3 分) \n . 正確識別遞迴參數並運用 Master 定理（或類似方法）求得 S(m) = Θ(m log m) 的漸進上界 (3 分) \n . 遞迴求解過程中分析不夠完整，或雖正確得到部分結果但解釋不充份 (部分分) \n . 未採用正確方法導出遞迴解或公式應用錯誤 (0 分) \n 結果還原及最終答案陳述 (3 分) \n . 正確將換元後的結果還原回原函數 T(n)，並清楚陳述 T(n) = Θ(log n · log log n)（或等價表示）的最終答案 (3 分) \n . 答案還原或最終結果陳述時存在不完整或模糊之處 (部分分) \n . 未進行結果還原或完全未給出最終答案 (0 分)"
  },
  "3": {
    "text": "Prove that an n-element heap has at most [n/2^{h+1}] nodes at height h.",
    "tables": [],
    "figures": [],
    "score": "10",
    "rubric": "- 正確闡述堆的結構與節點高度定義 (4分)  \n  - 全分：能完整且正確地描述 n 元堆的結構（如完全二元樹的性質）及節點高度的定義，並闡明高度 h 的意義與其在節點分佈中的角色。  \n  - 部分分：雖提及堆的基本結構或高度定義，但說明不夠詳盡或缺乏關鍵細節。  \n  - 零分：未能正確說明堆的結構或節點高度概念。\n\n- 採用正確的證明方法與推導步驟 (3分)  \n  - 全分：選用合適的證明方法（如數學歸納法或結構性計數方法），明確寫出基礎情況與遞推（或遞歸）步驟，推導過程嚴謹且邏輯清楚。  \n  - 部分分：證明方法選用尚可，但在基礎或遞推步驟中有部分論證不夠完整或存在漏洞。  \n  - 零分：未採用合理的證明方法，或證明過程中邏輯混亂，缺乏清晰的推導步驟。\n\n- 論證過程的邏輯性、完整性與結論正確性 (3分)  \n  - 全分：論證過程各步驟邏輯連貫、推理充分，最終得出正確且完整的結論，即 n 元堆在高度 h 上最多有 [n/2^(h+1)] 個節點。  \n  - 部分分：論證過程中雖能看出推理方向，但部分連結不夠嚴密，導致結論表述不夠明確或不夠完整。  \n  - 零分：論證過程邏輯性差，推導結論存在明顯錯誤或與題意完全不符。"
  },
 "4": {
    "text": "The radix sort can achieve time complexity better than all the comparison-based sorting algorithms (e.g., merge sort, quick sort). Why do all the programming languages still implement comparison-based sorting algorithms as the build-in function (e.g., qsort in C)?",
    "tables": [],
    "figures": [],
    "score": "5",
    "rubric": "- 辯述 Radix Sort 的限制（例如僅適用於特定數值或固定長度資料、可能需要額外記憶體及複雜的資料前處理）：5 分  - 完全得分：寫出兩項。\n  - 部分得分 : 只寫出一項 - 未提及或答非所問：0 分\n\n-  "
  },
  "5": {
    "text": "Consider a stick of length m meters that has to be cut at s_1, s_2, ..., and s_n meters from left end, where m and s_i are all integers and the cut order of s_i can be any permutation. The cost of each cut s_i is the length of stick prior to the cut, and thus different permutation of cut order leads to different cost. Illustrate a dynamic programming algorithm for finding the minimum cut cost of a stick of length 30, which will be cut at 3, 6, 12, 17, 22, and 28 meters from left end. You should write down the recurrence, bottom-up DP computation, and backtrack one optimal solution.",
    "tables": [],
    "figures": [],
    "score": "10",
    "rubric": "- 正確寫出cost = 84 (6 分)\n  - 完全得分(6分)：答案正確 \n  - 部分得分(3分) :答案錯誤但正確定義 DP 狀態 - 不得分:答案錯誤 錯誤定義 DP 狀態\n\n\n- 回溯求解一組最佳切割方案 (4 分)\n  - 完全得分：清楚說明如何從 DP 表中回溯找到最佳切割順序，並列舉出一組正確的最小成本切割方案。\n  - 部分得分：有嘗試回溯並描述部分結果，但流程不夠完整或結果與最佳解略有偏差。\n  - 不得分：完全未展示回溯過程或回溯結果錯誤，未能找出正確的最佳切割順序。"
  },
  "6": {
    "text": "Longest common subsequence.",
    "tables": [],
    "figures": [],
    "score": "25",
    "rubric": "- 問題理解與演算法選擇 (10 分)  \n  - 完全得分 (10 分)：能正確說明「最長共同子序列」的概念，清楚定義子序列及解題目標，並選擇合適（例如動態規劃）的方法來拆解問題。  \n  - 部分得分 (5-9 分)：對問題概念有部分正確描述，但存在不完全正確或漏缺部分關鍵細節；或是所選演算法與題意部分吻合。  \n  - 無得分 (0 分)：未能正確理解題目，概念混淆或選擇完全不適用的解題策略。\n\n- 動態規劃邏輯與遞迴關係構建 (10 分)  \n  - 完全得分 (10 分)：詳細描述動態規劃狀態定義、遞迴（或轉移）關係與邊界條件，並正確解釋如何由子問題逐步構造最終結果，包含時間與空間複雜度分析。  \n  - 部分得分 (5-9 分)：能描述主要的遞迴關係，但部分邊界條件或細節說明不完整、存在邏輯疏漏；或複雜度分析未說明清楚。  \n  - 無得分 (0 分)：未能提出合理的 DP 狀態轉移或遞迴公式，缺乏邏輯性與完整性。\n\n- 程式碼實現與測試驗證 (5 分)  \n  - 完全得分 (5 分)：提供正確且可運行（或偽代碼表示清晰）的程式碼實現，包含至少一個測試案例來驗證解法正確性。  \n  - 部分得分 (2-4 分)：程式碼或偽代碼基本正確，但存在小錯誤、格式不清或測試案例不足；能部分呈現解題思路。  \n  - 無得分 (0 分)：程式碼錯誤嚴重，無法運行，或完全缺乏實作與測試驗證。"
  },
  "6a": {
    "text": "Write the optimal substructure (recurrence) of computing LCS of k sequences, where k = 3",
    "tables": [],
    "figures": [],
    "score": "5",
    "rubric": "- 正確定義 DP 狀態（2 分）\n    - 全分：明確定義，各參數意義清楚。\n    - 部分分：有定義狀態，但說明不夠詳盡或部分參數意義模糊。\n    - 零分：未定義狀態或定義錯誤。\n  - 正確建立遞迴關係（2 分）\n    - 全分：完整列出當三序列末尾字元相同時及不全相同時從各子問題取最大值的遞迴公式。\n    - 部分分：遞迴關係描述不夠完整，缺少部分情況的考量。\n    - 零分：遞迴公式錯誤或完全未提供。\n  - 說明與邏輯清晰（1 分）\n    - 全分：附上清楚解釋，說明各情況推導過程，讓閱卷者易於理解。\n    - 部分分：說明略嫌模糊，邏輯連貫性不足。\n    - 零分：未附說明或解釋錯誤。"
  },
  "6b": {
    "text": "Given a string, find the longest subsequence occurring at least twice in the string, requiring their indices must not overlap. e.g., Given ATATAGAGGC, the answer is 4 since ATAG occurs twice and their indices (i.e., (1,2,5,6) and (3,4,7,8)) do not overlap. Describe a dynamic programming (recurrence) for the string ATTAATAT. You should show the bottom-up tabular computation.",
    "tables": [],
    "figures": [],
    "score": "10",
    "rubric": "- DP 狀態與遞迴關係定義（3 分）\n    - 全分：明確定義 DP 狀態，並正確描述遞迴關係。\n    - 部分分：狀態定義或遞迴公式描述不夠清楚，缺乏對非重疊條件的完整考量。\n    - 零分：狀態定義錯誤或遞迴關係完全錯漏。\n  - 非重疊限制的處理（3 分）\n    - 全分：完整說明如何利用索引條件或額外參數來避免子序列重疊，條件判斷明確。\n    - 部分分：僅部分提及非重疊限制，或說明不夠具體。\n    - 零分：未處理或處理方法錯誤。\n  - 例題解析（2 分）\n    - 全分：以 \"ATTAATAT\" 為例，詳細說明如何根據遞迴關係求解，步驟清楚，並求得最終解答為長度3。\n    - 部分分：例題解析不完整或僅略述重點。\n    - 零分：未提供例題說明。\n  - 自底向上表格展示（2 分）\n    - 全分：清楚展示表格填寫過程，步驟及狀態轉移一目了然。\n    - 部分分：表格展示不完整或步驟說明不夠細緻。\n    - 零分：完全未提供表格展示。"
  },
  "6c": {
    "text": "Compute the Longest Palindrome Subsequence (LPS) in any sequence using dynamic programming. Given a string \"character,\" the LPS is \"carac.\" You should write down the recurrence and bottom-up tabular computation.",
    "tables": [],
    "figures": [],
    "score": "10",
    "rubric": "- DP 狀態定義（3 分）\n    - 全分：明確定義，定義完整且正確。\n    - 部分分：狀態定義不夠明確或僅部分描述。\n    - 零分：未定義狀態或定義錯誤。\n  - 遞迴關係正確性（3 分）\n    - 全分：正確列出當首尾字元相同時，以及不相同時的遞迴公式，並附有合理解釋。\n    - 部分分：公式描述不夠全面或漏掉某一情況。\n    - 零分：遞迴公式錯誤或完全缺失。\n  - 例題解析（2 分）\n    - 全分：以 \"character\" 為例，詳細解析如何由遞迴關係求得 LPS \"carac\"，步驟明確。\n    - 部分分：例題解析不完整或解釋不清。\n    - 零分：未附例題說明或例題解析錯誤。\n  - 自底向上表格展示（2 分）\n    - 全分：完整展示從單一字元開始逐步填表的計算過程，每一步狀態值與轉移來源標示清楚。\n    - 部分分：展示過程部分缺失或說明不夠詳盡。\n    - 零分：完全未提供自底向上表格展示。"
  },
  "7": {
    "text": "Consider the knapsack problem of n items and W pack size. Suppose the pack/item sizes are very large and the item values are very small. Give a dynamic programming (recurrence) for solving this problem. Illustrate your tabular computation using the following example (W=350).\n[TABLE]",
    "tables": [
      "| Item | Weight | Value |\n|---------|---------|---------|\n| 1   | 100   | 1   |\n| 2   | 150   | 2   |\n| 3   | 200   | 4   |\n| 4   | 300   | 5   |"
    ],
    "figures": [],
    "score": "10",
    "rubric": "- DP 狀態定義與遞迴關係（6 分）\n  - 全分：清楚定義狀態，正確建立遞迴關係，且說明初始條件與邊界處理。\n  - 部分分：狀態定義或遞迴公式描述不夠完整，缺少初始條件或邊界條件的說明。\n  - 零分：未正確定義狀態或遞迴公式錯誤。\n\n- 表格計算展示（4 分）\n  - 全分：完整展示自底向上填表的過程，針對給定範例列出相應表格，並清楚標示每個狀態的來源與轉移過程。\n  - 部分分：表格展示或計算過程部分缺失，步驟說明不夠詳盡。\n  - 零分：未提供表格展示或表格內容完全錯誤。\n"
  },
  "8": {
    "text": "Consider the following six activities with (start time, finish time, and value): (2, 4, 3), (5, 5, 5), (3, 4, 2), (1, 4, 3), (1, 3, 1), (3, 5, 4). Illustrate a dynamic programming algorithm for computing the mutually-exclusive subset of activities of maximum total values using the above example.",
    "tables": [],
    "figures": [],
    "score": "10",
    "rubric": "- 正確寫出最大總價值。 (7分) \n - 全分:答案正確 \n 部分：答案錯誤但知道需要先將活動按 結束時間 (finish time) 排序 \n -不得分:答案錯誤且未提出finish time \n\n 寫出 mutually exclusive subset of activities(3分) -全分:答案正確\n -不得分:答案錯誤"
  }
}